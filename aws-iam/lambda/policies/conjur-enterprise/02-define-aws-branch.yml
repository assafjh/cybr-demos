---
# Load policy into data/aws branch
# This policy defines the demo branch aws

# lambda is a layer that will aggregate safe permissions for aws lambda functions
- !layer
  id: lambda
  owner: !group admins

# create secrets
- !policy
  id: lambda/safe
  owner: !group admins
  body:
  - &aws-secrets
    - !variable
      id: secret1
      owner: !group ../../admins
    - !variable
      id: secret2
      owner: !group ../../admins
    - !variable
      id: secret3
      owner: !group ../../admins

 # Allow lambda layer to consume the secrets we have created
  - !permit
    role: !layer ../../lambda
    privileges: [ read, execute ]
    resource: *aws-secrets

# Create the Project identities that we will use to authenticate to Conjur 
# before loading this, change the variables below or export and load with envsubst
# envsubst < policies/02-define-aws-branch.yml > 02-define-aws-branch.yml
# ROLE_ARN structure is: $ACCOUNT_NUMBER/$ROLE_NAME
# Example: arn:aws:iam::1234:role/service-role/ajh-elastic-conjur-role-123 -> export ROLE_ARN=1234/ajh-elastic-conjur-role-123
- &hosts
  - !host
    id: lambda/$ROLE_ARN
    owner: !group admins
    annotations:
      authn/api-key: true

# Add the hosts we have created to their respective layer
- !grant
  roles:
    - !layer lambda
  members: *hosts