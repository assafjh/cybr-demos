#=========== Conjur leader container details ===========
# Is sudo required to run docker/podman - leave empty if no need
SUDO=
# Using docker/podman
CONTAINER_MGR=docker
# Conjur Leader port
CONJUR_LEADER_PORT=443
# Conjur Leader container ID
CONTAINER_ID=$(curl -s -k "https://127.0.0.1:$CONJUR_LEADER_PORT/info" | awk '/container/ {print $2}' | tr -d '",')

#=========== Root CA details ===========
# Root key file path
ROOT_CA_KEY_PATH="$SCRIPT_DIR"/../certs/rootCA.key
# Root certificate file path
ROOT_CA_CERTIFICATE_PATH="$SCRIPT_DIR"/../certs/rootCA.pem

#=========== Leader certificate details ===========
# Generated Key filename
LEADER_KEY_FILE_PATH="$SCRIPT_DIR"/../certs/custom-conjur-leader.key
# Generated Certificate filename
LEADER_CERTIFICATE_FILE_PATH="$SCRIPT_DIR"/../certs/custom-conjur-leader.pem

# Leader CN
LEADER_CN="ip-172-16-0-92.eu-west-2.compute.internal"

# Leader SAN
LEADER_SUBJECT_ALT_NAMES='
[alt_names]
DNS.1 = localhost
DNS.2 = ec2-18-170-77-68.eu-west-2.compute.amazonaws.com
IP.1 = 127.0.0.1
'

#=========== Functions ===========
# Copy certs
function COPY_CERTS_TO_LEADER() {
    local -a files_array+=("$@")
    if [ -z "$files_array" ]; then 
        echo "Nothing to copy" 
        exit 1
    else
        $SUDO $CONTAINER_MGR exec -it $CONTAINER_ID bash -c '[ ! -d /certs ] && mkdir /certs'
        for i in "${files_array[@]}"
        do
	    [ -f "$i" ] && $SUDO $CONTAINER_MGR cp "$i" "$CONTAINER_ID":/certs
        done
    fi
}
